"use strict";var e=require("chroma-js");const r=(r,s,a)=>e(r).darken(((e,r)=>(e-r)/100/2)(a,s)).hex(),s=e=>{const s=((e,r)=>r.shades.reduce(((s,a)=>(s[a]=e(r.primaryColor,r.mainShade,a),s)),{}))(r,e),a={...s,DEFAULT:e.primaryColor};return Object.freeze(a)??{}},a={mainShade:500,primaryColor:"#FFBD00",shades:[50,100,200,300,400,500,600,700,800,900]},o=e=>{if(e.color&&"string"==typeof e.color&&e.name&&"string"==typeof e.name){if("string"==typeof(r=e.color)&&/^#([\da-f]{3}){1,2}$|^#([\da-f]{6}){1,2}$|(rgb|hsl)a?\((\s*-?\d+%?\s*,){2}(\s*-?\d+%?\s*,?\s*\)?)(,\s*(0?\.\d+)?|1)?\)/gim.test(r)){if(!e.shade&&e.shades)throw new Error("If you want to specify the shades, you have to specify the main shade.");if(e.shade&&"number"!=typeof e.shade)throw new Error(`'${e.shade}' - type: ${typeof e.shade} It must be of type number.`);if(e.shades&&!Array.isArray(e.shades))throw new Error("Shades are not array.");if(e.shades&&e.shades.length<=2)throw new Error("Shades can consist of at least 3 elements.");if(e.shade&&e.shades&&!e.shades.includes(e.shade))throw new Error(`'${e.shade}' mainShade are not included in the your shades.`);if(e.shades||!e.shade||a.shades.includes(e.shade))return!0;throw new Error(`'${e.shade}' mainShade can only be 50, 100, 200, 300, 400, 500, 600, 700, 800 or 900.`)}throw new Error(`'${e.color}' The value you entered is not a color. e.g #ffbd00 or #ffb or rgba(255, 189, 0, 1) or rgb(255, 189, 0) or hsl(44, 100%, 50%)`)}throw new Error("Make sure the required data is included.");var r};module.exports=r=>{let h={};if(Array.isArray(r))for(let d=0;d<r.length;d++){const t=r[d];if(o(t)){const r={mainShade:t.shade??a.mainShade,primaryColor:e(t.color).hex()??a.primaryColor,shades:t.shades??a.shades};h[t.name]=s(r)}}else if("string"==typeof r||Array.isArray(r)){if("string"==typeof r){const o=Object.assign(a,{primaryColor:e(r).hex()});h.primary=s(o)}}else if(o(r)){const o={mainShade:r.shade??a.mainShade,primaryColor:e(r.color).hex()??a.primaryColor,shades:r.shades??a.shades};h[r.name]=s(o)}return h};
