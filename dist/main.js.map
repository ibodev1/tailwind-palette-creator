{"version":3,"file":"main.js","sources":["../src/main.ts"],"sourcesContent":["import chroma from \"chroma-js\";\r\n\r\nexport interface Palette {\r\n  name: string;\r\n  color: string;\r\n  shade?: number;\r\n  shades?: number[];\r\n}\r\n\r\nconst main = {\r\n  state: {\r\n    initialParams: {\r\n      color: \"#FFBD00\",\r\n      name: \"primary\",\r\n      shade: 500,\r\n      shades: [50, 100, 200, 300, 400, 500, 600, 700, 800, 900]\r\n    },\r\n    primaryColor: \"#FFBD00\",\r\n    shades: [50, 100, 200, 300, 400, 500, 600, 700, 800, 900],\r\n    mainShade: 500\r\n  },\r\n  getters: {\r\n    darkenValue: (shade: number) => {\r\n      return (shade - main.state.mainShade) / 100 / 2;\r\n    },\r\n    shadeColor: (shade: number) => {\r\n      return chroma(main.state.primaryColor)\r\n        .darken(main.getters.darkenValue(shade))\r\n        .hex();\r\n    },\r\n    shadeColorResult: (fn: any) => {\r\n      return main.state.shades.reduce((acc: any, shade: number) => {\r\n        acc[shade] = fn(shade);\r\n        return acc;\r\n      }, {});\r\n    },\r\n    colorResult: () => {\r\n      const palette = main.getters.shadeColorResult(main.getters.shadeColor);\r\n      const DEFAULT = main.getters.shadeColor(main.state.mainShade);\r\n      const colorPalette = {\r\n        ...palette,\r\n        DEFAULT: DEFAULT\r\n      };\r\n      return Object.freeze(colorPalette) ?? {};\r\n    }\r\n  },\r\n  checks: {\r\n    checkParam: (palette: Palette) => {\r\n      if (\r\n        palette.color &&\r\n        typeof palette.color === \"string\" &&\r\n        palette.name &&\r\n        typeof palette.name == \"string\"\r\n      ) {\r\n        if (!main.checks.checkColor(palette.color)) {\r\n          throw new Error(\r\n            `'${palette.color}' The value you entered is not a color. e.g #ffbd00 or #ffb or rgba(255, 189, 0, 1) or rgb(255, 189, 0) or hsl(44, 100%, 50%)`\r\n          );\r\n        } else if (!palette.shade && palette.shades) {\r\n          throw new Error(\r\n            `If you want to specify the shades, you have to specify the main shade.`\r\n          );\r\n        } else if (palette.shade && typeof palette.shade !== \"number\") {\r\n          throw new Error(\r\n            `'${palette.shade}' - type: ${typeof palette.shade} It must be of type number.`\r\n          );\r\n        } else if (\r\n          palette.shades &&\r\n          !Array.isArray(palette.shades)\r\n        ) {\r\n          throw new Error(`Shades are not array.`);\r\n        } else if (palette.shades && palette.shades.length <= 2) {\r\n          throw new Error(`Shades can consist of at least 3 elements.`);\r\n        } else if (\r\n          palette.shade &&\r\n          palette.shades &&\r\n          !palette.shades.includes(palette.shade)\r\n        ) {\r\n          throw new Error(\r\n            `'${palette.shade}' mainShade are not included in the your shades.`\r\n          );\r\n        } else if (\r\n          !palette.shades &&\r\n          palette.shade &&\r\n          !main.state.initialParams.shades.includes(palette.shade)\r\n        ) {\r\n          throw new Error(\r\n            `'${palette.shade}' mainShade can only be 50, 100, 200, 300, 400, 500, 600, 700, 800 or 900.`\r\n          );\r\n        } else {\r\n          return true;\r\n        }\r\n      } else {\r\n        throw new Error(\"Make sure the required data is included.\");\r\n      }\r\n    },\r\n    checkColor: (color: string) => {\r\n      var reg = /^#([\\da-f]{3}){1,2}$|^#([\\da-f]{6}){1,2}$|(rgb|hsl)a?\\((\\s*-?\\d+%?\\s*,){2}(\\s*-?\\d+%?\\s*,?\\s*\\)?)(,\\s*(0?\\.\\d+)?|1)?\\)/gim;\r\n      if (typeof color === \"string\" && reg.test(color)) {\r\n        return true;\r\n      } else {\r\n        return false;\r\n      }\r\n    }\r\n  }\r\n};\r\n\r\nconst getPalette = (\r\n  params: Palette[] | Palette | string = main.state.initialParams\r\n): {[key: string]: string} | {[key: string]: string}[] | undefined => {\r\n  let palette: {[key: string]: string} | {[key: string]: string}[] = {};\r\n  main.state.primaryColor = \"#FFBD00\";\r\n  main.state.mainShade = 500;\r\n  main.state.shades = [50, 100, 200, 300, 400, 500, 600, 700, 800, 900];\r\n  if (Array.isArray(params)) {\r\n    for (let index = 0; index < params.length; index++) {\r\n      const colorPalette = params[index];\r\n      if (main.checks.checkParam(colorPalette)) {\r\n        main.state.primaryColor = chroma(colorPalette.color).hex();\r\n        main.state.mainShade = colorPalette.shade || main.state.mainShade;\r\n        main.state.shades = colorPalette.shades || main.state.shades;\r\n        let result = main.getters.colorResult();\r\n\r\n        palette[colorPalette.name] = result;\r\n      }\r\n    }\r\n    return palette;\r\n  } else if (typeof params !== \"string\" && !Array.isArray(params)) {\r\n    if (main.checks.checkParam(params)) {\r\n      main.state.primaryColor = chroma(params.color).hex();\r\n      main.state.mainShade = params.shade || main.state.mainShade;\r\n      main.state.shades = params.shades || main.state.shades;\r\n      let result = main.getters.colorResult();\r\n\r\n      palette[params.name] = result;\r\n\r\n      return palette;\r\n    }\r\n  } else if (typeof params === \"string\") {\r\n    main.state.primaryColor = chroma(params.toString()).hex();\r\n    let result = main.getters.colorResult();\r\n\r\n    palette[main.state.initialParams.name] = result;\r\n\r\n    return palette;\r\n  }\r\n};\r\n\r\nexport default getPalette;\r\n"],"names":[],"mappings":"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"}